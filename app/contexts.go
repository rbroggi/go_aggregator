// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "exposures": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/rbroggi/go_aggregator/design
// --out=$(GOPATH)/src/github.com/rbroggi/go_aggregator
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CoverageContractContext provides the contract coverage action context.
type CoverageContractContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ContractID string
}

// NewCoverageContractContext parses the incoming request URL and body, performs validations and creates the
// context used by the contract controller coverage action.
func NewCoverageContractContext(ctx context.Context, r *http.Request, service *goa.Service) (*CoverageContractContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CoverageContractContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContractID := req.Params["contractID"]
	if len(paramContractID) > 0 {
		rawContractID := paramContractID[0]
		rctx.ContractID = rawContractID
	}
	return &rctx, err
}

// OKCoverage sends a HTTP response with status code 200.
func (ctx *CoverageContractContext) OKCoverage(r *GoaContractCoverage) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.contract+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CoverageContractContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ExposureContractContext provides the contract exposure action context.
type ExposureContractContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ContractID string
}

// NewExposureContractContext parses the incoming request URL and body, performs validations and creates the
// context used by the contract controller exposure action.
func NewExposureContractContext(ctx context.Context, r *http.Request, service *goa.Service) (*ExposureContractContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ExposureContractContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContractID := req.Params["contractID"]
	if len(paramContractID) > 0 {
		rawContractID := paramContractID[0]
		rctx.ContractID = rawContractID
	}
	return &rctx, err
}

// OKExpanded sends a HTTP response with status code 200.
func (ctx *ExposureContractContext) OKExpanded(r *GoaContractExpanded) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.contract+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ExposureContractContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowContractContext provides the contract show action context.
type ShowContractContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ContractID string
}

// NewShowContractContext parses the incoming request URL and body, performs validations and creates the
// context used by the contract controller show action.
func NewShowContractContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowContractContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowContractContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContractID := req.Params["contractID"]
	if len(paramContractID) > 0 {
		rawContractID := paramContractID[0]
		rctx.ContractID = rawContractID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowContractContext) OK(r *GoaTrade) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.trade+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKExpanded sends a HTTP response with status code 200.
func (ctx *ShowContractContext) OKExpanded(r *GoaTradeExpanded) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.trade+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowContractContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ExposureTradeContext provides the trade exposure action context.
type ExposureTradeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TradeID string
}

// NewExposureTradeContext parses the incoming request URL and body, performs validations and creates the
// context used by the trade controller exposure action.
func NewExposureTradeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ExposureTradeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ExposureTradeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTradeID := req.Params["tradeID"]
	if len(paramTradeID) > 0 {
		rawTradeID := paramTradeID[0]
		rctx.TradeID = rawTradeID
	}
	return &rctx, err
}

// OKExpanded sends a HTTP response with status code 200.
func (ctx *ExposureTradeContext) OKExpanded(r *GoaTradeExpanded) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.trade+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ExposureTradeContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// PriceTradeContext provides the trade price action context.
type PriceTradeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Contract string
	Ctp      string
	Trade    string
}

// NewPriceTradeContext parses the incoming request URL and body, performs validations and creates the
// context used by the trade controller price action.
func NewPriceTradeContext(ctx context.Context, r *http.Request, service *goa.Service) (*PriceTradeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PriceTradeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContract := req.Params["contract"]
	if len(paramContract) > 0 {
		rawContract := paramContract[0]
		rctx.Contract = rawContract
	}
	paramCtp := req.Params["ctp"]
	if len(paramCtp) > 0 {
		rawCtp := paramCtp[0]
		rctx.Ctp = rawCtp
	}
	paramTrade := req.Params["trade"]
	if len(paramTrade) > 0 {
		rawTrade := paramTrade[0]
		rctx.Trade = rawTrade
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PriceTradeContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// ShowTradeContext provides the trade show action context.
type ShowTradeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TradeID string
}

// NewShowTradeContext parses the incoming request URL and body, performs validations and creates the
// context used by the trade controller show action.
func NewShowTradeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTradeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTradeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTradeID := req.Params["tradeID"]
	if len(paramTradeID) > 0 {
		rawTradeID := paramTradeID[0]
		rctx.TradeID = rawTradeID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTradeContext) OK(r *GoaTrade) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.trade+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKExpanded sends a HTTP response with status code 200.
func (ctx *ShowTradeContext) OKExpanded(r *GoaTradeExpanded) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.trade+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTradeContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
