// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "exposures": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/rbroggi/go_aggregator/design
// --out=$(GOPATH)/src/github.com/rbroggi/go_aggregator
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ContractController is the controller interface for the Contract actions.
type ContractController interface {
	goa.Muxer
	Coverage(*CoverageContractContext) error
	Exposure(*ExposureContractContext) error
	Show(*ShowContractContext) error
}

// MountContractController "mounts" a Contract resource controller on the given service.
func MountContractController(service *goa.Service, ctrl ContractController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCoverageContractContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Coverage(rctx)
	}
	service.Mux.Handle("GET", "/v1/contract/coverage/:contractID", ctrl.MuxHandler("coverage", h, nil))
	service.LogInfo("mount", "ctrl", "Contract", "action", "Coverage", "route", "GET /v1/contract/coverage/:contractID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewExposureContractContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Exposure(rctx)
	}
	service.Mux.Handle("GET", "/v1/contract/exposure/:contractID", ctrl.MuxHandler("exposure", h, nil))
	service.LogInfo("mount", "ctrl", "Contract", "action", "Exposure", "route", "GET /v1/contract/exposure/:contractID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowContractContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/v1/contract/show/:contractID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Contract", "action", "Show", "route", "GET /v1/contract/show/:contractID")
}

// TradeController is the controller interface for the Trade actions.
type TradeController interface {
	goa.Muxer
	Exposure(*ExposureTradeContext) error
	Price(*PriceTradeContext) error
	Show(*ShowTradeContext) error
}

// MountTradeController "mounts" a Trade resource controller on the given service.
func MountTradeController(service *goa.Service, ctrl TradeController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewExposureTradeContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Exposure(rctx)
	}
	service.Mux.Handle("GET", "/v1/trade/exposure/:tradeID", ctrl.MuxHandler("exposure", h, nil))
	service.LogInfo("mount", "ctrl", "Trade", "action", "Exposure", "route", "GET /v1/trade/exposure/:tradeID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPriceTradeContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Price(rctx)
	}
	service.Mux.Handle("GET", "/v1/trade/price/:ctp/:contract/:trade", ctrl.MuxHandler("price", h, nil))
	service.LogInfo("mount", "ctrl", "Trade", "action", "Price", "route", "GET /v1/trade/price/:ctp/:contract/:trade")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowTradeContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/v1/trade/show/:tradeID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Trade", "action", "Show", "route", "GET /v1/trade/show/:tradeID")
}
