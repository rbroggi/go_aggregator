// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "exposures": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/rbroggi/go_aggregator/design
// --out=$(GOPATH)/src/github.com/rbroggi/go_aggregator
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/rbroggi/go_aggregator/client"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CoverageContractCommand is the command line data structure for the coverage action of contract
	CoverageContractCommand struct {
		// Contract ID
		ContractID  string
		PrettyPrint bool
	}

	// ExposureContractCommand is the command line data structure for the exposure action of contract
	ExposureContractCommand struct {
		// Contract ID
		ContractID  string
		PrettyPrint bool
	}

	// ShowContractCommand is the command line data structure for the show action of contract
	ShowContractCommand struct {
		// Contract ID
		ContractID  string
		PrettyPrint bool
	}

	// ExposureTradeCommand is the command line data structure for the exposure action of trade
	ExposureTradeCommand struct {
		// Trade ID
		TradeID     string
		PrettyPrint bool
	}

	// PriceTradeCommand is the command line data structure for the price action of trade
	PriceTradeCommand struct {
		// Contract terms id
		Contract string
		// Counterparty with which trade is done
		Ctp string
		// Trade identifier
		Trade       string
		PrettyPrint bool
	}

	// ShowTradeCommand is the command line data structure for the show action of trade
	ShowTradeCommand struct {
		// Trade ID
		TradeID     string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "coverage",
		Short: `Get contract exposures by id`,
	}
	tmp1 := new(CoverageContractCommand)
	sub = &cobra.Command{
		Use:   `contract ["/v1/contract/coverage/CONTRACTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "exposure",
		Short: `exposure action`,
	}
	tmp2 := new(ExposureContractCommand)
	sub = &cobra.Command{
		Use:   `contract ["/v1/contract/exposure/CONTRACTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp3 := new(ExposureTradeCommand)
	sub = &cobra.Command{
		Use:   `trade ["/v1/trade/exposure/TRADEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "price",
		Short: `Creates new trade and randomly generates its exposures`,
	}
	tmp4 := new(PriceTradeCommand)
	sub = &cobra.Command{
		Use:   `trade ["/v1/trade/price/CTP/CONTRACT/TRADE"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp5 := new(ShowContractCommand)
	sub = &cobra.Command{
		Use:   `contract ["/v1/contract/show/CONTRACTID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(ShowTradeCommand)
	sub = &cobra.Command{
		Use:   `trade ["/v1/trade/show/TRADEID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CoverageContractCommand command.
func (cmd *CoverageContractCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/contract/coverage/%v", url.QueryEscape(cmd.ContractID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CoverageContract(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CoverageContractCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contractID string
	cc.Flags().StringVar(&cmd.ContractID, "contractID", contractID, `Contract ID`)
}

// Run makes the HTTP request corresponding to the ExposureContractCommand command.
func (cmd *ExposureContractCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/contract/exposure/%v", url.QueryEscape(cmd.ContractID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ExposureContract(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ExposureContractCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contractID string
	cc.Flags().StringVar(&cmd.ContractID, "contractID", contractID, `Contract ID`)
}

// Run makes the HTTP request corresponding to the ShowContractCommand command.
func (cmd *ShowContractCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/contract/show/%v", url.QueryEscape(cmd.ContractID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowContract(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowContractCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contractID string
	cc.Flags().StringVar(&cmd.ContractID, "contractID", contractID, `Contract ID`)
}

// Run makes the HTTP request corresponding to the ExposureTradeCommand command.
func (cmd *ExposureTradeCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/trade/exposure/%v", url.QueryEscape(cmd.TradeID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ExposureTrade(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ExposureTradeCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var tradeID string
	cc.Flags().StringVar(&cmd.TradeID, "tradeID", tradeID, `Trade ID`)
}

// Run makes the HTTP request corresponding to the PriceTradeCommand command.
func (cmd *PriceTradeCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/trade/price/%v/%v/%v", url.QueryEscape(cmd.Ctp), url.QueryEscape(cmd.Contract), url.QueryEscape(cmd.Trade))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PriceTrade(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PriceTradeCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var contract string
	cc.Flags().StringVar(&cmd.Contract, "contract", contract, `Contract terms id`)
	var ctp string
	cc.Flags().StringVar(&cmd.Ctp, "ctp", ctp, `Counterparty with which trade is done`)
	var trade string
	cc.Flags().StringVar(&cmd.Trade, "trade", trade, `Trade identifier`)
}

// Run makes the HTTP request corresponding to the ShowTradeCommand command.
func (cmd *ShowTradeCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/trade/show/%v", url.QueryEscape(cmd.TradeID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowTrade(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowTradeCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var tradeID string
	cc.Flags().StringVar(&cmd.TradeID, "tradeID", tradeID, `Trade ID`)
}
