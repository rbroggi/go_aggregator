// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "exposures": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/rbroggi/go_aggregator/design
// --out=$(GOPATH)/src/github.com/rbroggi/go_aggregator
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// Trade structure exposures (coverage view)
//
// Identifier: application/vnd.goa.contract+json; view=coverage
type GoaContractCoverage struct {
	// List of trades under the contract
	TradeIDList []string `form:"trade_id_list" json:"trade_id_list" xml:"trade_id_list"`
}

// Validate validates the GoaContractCoverage media type instance.
func (mt *GoaContractCoverage) Validate() (err error) {
	if mt.TradeIDList == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "trade_id_list"))
	}
	return
}

// Trade structure exposures (default view)
//
// Identifier: application/vnd.goa.contract+json; view=default
type GoaContract struct {
	// Unique contract id
	ContractID string `form:"contract_id" json:"contract_id" xml:"contract_id"`
	// Counterparty id to which the contract belongs
	CounterpartyID string `form:"counterparty_id" json:"counterparty_id" xml:"counterparty_id"`
}

// Validate validates the GoaContract media type instance.
func (mt *GoaContract) Validate() (err error) {
	if mt.ContractID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "contract_id"))
	}
	if mt.CounterpartyID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "counterparty_id"))
	}
	return
}

// Trade structure exposures (expanded view)
//
// Identifier: application/vnd.goa.contract+json; view=expanded
type GoaContractExpanded struct {
	// Unique contract id
	ContractID string `form:"contract_id" json:"contract_id" xml:"contract_id"`
	// Counterparty id to which the contract belongs
	CounterpartyID string `form:"counterparty_id" json:"counterparty_id" xml:"counterparty_id"`
	// contract aggregated exposures
	Exposures []float64 `form:"exposures" json:"exposures" xml:"exposures"`
	// List of trades under the contract
	TradeIDList []string `form:"trade_id_list" json:"trade_id_list" xml:"trade_id_list"`
}

// Validate validates the GoaContractExpanded media type instance.
func (mt *GoaContractExpanded) Validate() (err error) {
	if mt.ContractID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "contract_id"))
	}
	if mt.CounterpartyID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "counterparty_id"))
	}
	if mt.TradeIDList == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "trade_id_list"))
	}
	if mt.Exposures == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "exposures"))
	}
	return
}

// DecodeGoaContractCoverage decodes the GoaContractCoverage instance encoded in resp body.
func (c *Client) DecodeGoaContractCoverage(resp *http.Response) (*GoaContractCoverage, error) {
	var decoded GoaContractCoverage
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeGoaContract decodes the GoaContract instance encoded in resp body.
func (c *Client) DecodeGoaContract(resp *http.Response) (*GoaContract, error) {
	var decoded GoaContract
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeGoaContractExpanded decodes the GoaContractExpanded instance encoded in resp body.
func (c *Client) DecodeGoaContractExpanded(resp *http.Response) (*GoaContractExpanded, error) {
	var decoded GoaContractExpanded
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Trade structure exposures (coverage view)
//
// Identifier: application/vnd.goa.ctp+json; view=coverage
type GoaCtpCoverage struct {
	// List of contracts under the contract
	ContractIDList []string `form:"contract_id_list" json:"contract_id_list" xml:"contract_id_list"`
}

// Validate validates the GoaCtpCoverage media type instance.
func (mt *GoaCtpCoverage) Validate() (err error) {
	if mt.ContractIDList == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "contract_id_list"))
	}
	return
}

// Trade structure exposures (default view)
//
// Identifier: application/vnd.goa.ctp+json; view=default
type GoaCtp struct {
	// Counterparty id
	CounterpartyID string `form:"counterparty_id" json:"counterparty_id" xml:"counterparty_id"`
}

// Validate validates the GoaCtp media type instance.
func (mt *GoaCtp) Validate() (err error) {
	if mt.CounterpartyID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "counterparty_id"))
	}
	return
}

// Trade structure exposures (expanded view)
//
// Identifier: application/vnd.goa.ctp+json; view=expanded
type GoaCtpExpanded struct {
	// Counterparty id
	CounterpartyID string `form:"counterparty_id" json:"counterparty_id" xml:"counterparty_id"`
	// counterparty aggregated exposures
	Exposures []float64 `form:"exposures" json:"exposures" xml:"exposures"`
}

// Validate validates the GoaCtpExpanded media type instance.
func (mt *GoaCtpExpanded) Validate() (err error) {
	if mt.CounterpartyID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "counterparty_id"))
	}
	if mt.Exposures == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "exposures"))
	}
	return
}

// DecodeGoaCtpCoverage decodes the GoaCtpCoverage instance encoded in resp body.
func (c *Client) DecodeGoaCtpCoverage(resp *http.Response) (*GoaCtpCoverage, error) {
	var decoded GoaCtpCoverage
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeGoaCtp decodes the GoaCtp instance encoded in resp body.
func (c *Client) DecodeGoaCtp(resp *http.Response) (*GoaCtp, error) {
	var decoded GoaCtp
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeGoaCtpExpanded decodes the GoaCtpExpanded instance encoded in resp body.
func (c *Client) DecodeGoaCtpExpanded(resp *http.Response) (*GoaCtpExpanded, error) {
	var decoded GoaCtpExpanded
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Trade structure exposures (default view)
//
// Identifier: application/vnd.goa.trade+json; view=default
type GoaTrade struct {
	// contract to which trade belong
	ContractID string `form:"contract_id" json:"contract_id" xml:"contract_id"`
	// Counterparty to which the trade belongs
	CounterpartyID string `form:"counterparty_id" json:"counterparty_id" xml:"counterparty_id"`
	// Unique trade ID
	TradeID string `form:"trade_id" json:"trade_id" xml:"trade_id"`
}

// Validate validates the GoaTrade media type instance.
func (mt *GoaTrade) Validate() (err error) {
	if mt.TradeID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "trade_id"))
	}
	if mt.CounterpartyID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "counterparty_id"))
	}
	if mt.ContractID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "contract_id"))
	}
	return
}

// Trade structure exposures (expanded view)
//
// Identifier: application/vnd.goa.trade+json; view=expanded
type GoaTradeExpanded struct {
	// contract to which trade belong
	ContractID string `form:"contract_id" json:"contract_id" xml:"contract_id"`
	// Counterparty to which the trade belongs
	CounterpartyID string `form:"counterparty_id" json:"counterparty_id" xml:"counterparty_id"`
	// trade exposures
	Exposures []float64 `form:"exposures" json:"exposures" xml:"exposures"`
	// Unique trade ID
	TradeID string `form:"trade_id" json:"trade_id" xml:"trade_id"`
}

// Validate validates the GoaTradeExpanded media type instance.
func (mt *GoaTradeExpanded) Validate() (err error) {
	if mt.TradeID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "trade_id"))
	}
	if mt.CounterpartyID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "counterparty_id"))
	}
	if mt.ContractID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "contract_id"))
	}
	if mt.Exposures == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "exposures"))
	}
	return
}

// DecodeGoaTrade decodes the GoaTrade instance encoded in resp body.
func (c *Client) DecodeGoaTrade(resp *http.Response) (*GoaTrade, error) {
	var decoded GoaTrade
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeGoaTradeExpanded decodes the GoaTradeExpanded instance encoded in resp body.
func (c *Client) DecodeGoaTradeExpanded(resp *http.Response) (*GoaTradeExpanded, error) {
	var decoded GoaTradeExpanded
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
