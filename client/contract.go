// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "exposures": contract Resource Client
//
// Command:
// $ goagen
// --design=github.com/rbroggi/go_aggregator/design
// --out=$(GOPATH)/src/github.com/rbroggi/go_aggregator
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CoverageContractPath computes a request path to the coverage action of contract.
func CoverageContractPath(contractID string) string {
	param0 := contractID

	return fmt.Sprintf("/v1/contract/coverage/%s", param0)
}

// Get contract exposures by id
func (c *Client) CoverageContract(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCoverageContractRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCoverageContractRequest create the request corresponding to the coverage action endpoint of the contract resource.
func (c *Client) NewCoverageContractRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ExposureContractPath computes a request path to the exposure action of contract.
func ExposureContractPath(contractID string) string {
	param0 := contractID

	return fmt.Sprintf("/v1/contract/exposure/%s", param0)
}

// Get contract exposures by id
func (c *Client) ExposureContract(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewExposureContractRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewExposureContractRequest create the request corresponding to the exposure action endpoint of the contract resource.
func (c *Client) NewExposureContractRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowContractPath computes a request path to the show action of contract.
func ShowContractPath(contractID string) string {
	param0 := contractID

	return fmt.Sprintf("/v1/contract/show/%s", param0)
}

// Get trade by id
func (c *Client) ShowContract(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowContractRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowContractRequest create the request corresponding to the show action endpoint of the contract resource.
func (c *Client) NewShowContractRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
